From 543f6ae6d9241d9b1730930c828d083eaad87982 Mon Sep 17 00:00:00 2001
From: Warren Togami <wtogami@gmail.com>
Date: Sun, 3 Aug 2025 00:59:22 -0500
Subject: [PATCH 1/2] DEMO - disable QCOM tinygrad compile so build completes.
 This build would work with non-default downloaded models.

---
 selfdrive/modeld/SConscript | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/selfdrive/modeld/SConscript b/selfdrive/modeld/SConscript
index 6802b45e6e..229d0a66fb 100644
--- a/selfdrive/modeld/SConscript
+++ b/selfdrive/modeld/SConscript
@@ -32,11 +32,11 @@ lenvCython.Program('models/commonmodel_pyx.so', 'models/commonmodel_pyx.pyx', LI
 tinygrad_files = ["#"+x for x in glob.glob(env.Dir("#tinygrad_repo").relpath + "/**", recursive=True, root_dir=env.Dir("#").abspath) if 'pycache' not in x]
 
 # Get model metadata
-for model_name in ['driving_vision', 'driving_policy']:
-  fn = File(f"models/{model_name}").abspath
-  script_files = [File(Dir("#selfdrive/modeld").File("get_model_metadata.py").abspath)]
-  cmd = f'python3 {Dir("#selfdrive/modeld").abspath}/get_model_metadata.py {fn}.onnx'
-  lenv.Command(fn + "_metadata.pkl", [fn + ".onnx"] + tinygrad_files + script_files, cmd)
+#for model_name in ['driving_vision', 'driving_policy']:
+#  fn = File(f"models/{model_name}").abspath
+#  script_files = [File(Dir("#selfdrive/modeld").File("get_model_metadata.py").abspath)]
+#  cmd = f'python3 {Dir("#selfdrive/modeld").abspath}/get_model_metadata.py {fn}.onnx'
+#  lenv.Command(fn + "_metadata.pkl", [fn + ".onnx"] + tinygrad_files + script_files, cmd)
 
 def tg_compile(flags, model_name):
   pythonpath_string = 'PYTHONPATH="${PYTHONPATH}:' + env.Dir("#tinygrad_repo").abspath + '"'
@@ -48,12 +48,12 @@ def tg_compile(flags, model_name):
   )
 
 # Compile small models
-for model_name in ['driving_vision', 'driving_policy', 'dmonitoring_model']:
-  flags = {
-    'larch64': 'DEV=QCOM',
-    'Darwin': 'DEV=CPU IMAGE=0',
-  }.get(arch, 'DEV=LLVM IMAGE=0')
-  tg_compile(flags, model_name)
+#for model_name in ['driving_vision', 'driving_policy', 'dmonitoring_model']:
+#  flags = {
+#    'larch64': 'DEV=QCOM',
+#    'Darwin': 'DEV=CPU IMAGE=0',
+#  }.get(arch, 'DEV=LLVM IMAGE=0')
+#  tg_compile(flags, model_name)
 
 # Compile BIG model if USB GPU is available
 if "USBGPU" in os.environ:
-- 
2.50.1

