// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: custom.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cd4d70bbee44938f);
CAPNP_DECLARE_SCHEMA(92199b6d79d06606);
enum class ModularAssistiveDrivingSystemState_92199b6d79d06606: uint16_t {
  DISABLED,
  PAUSED,
  ENABLED,
  SOFT_DISABLING,
  OVERRIDING,
};
CAPNP_DECLARE_ENUM(ModularAssistiveDrivingSystemState, 92199b6d79d06606);
CAPNP_DECLARE_SCHEMA(81c2f05a394cf4af);
CAPNP_DECLARE_SCHEMA(aedffd8f31e7b55d);
CAPNP_DECLARE_SCHEMA(d8cbae8ae9dfe286);
CAPNP_DECLARE_SCHEMA(da834d53e62048b9);
enum class DownloadStatus_da834d53e62048b9: uint16_t {
  NOT_DOWNLOADING,
  DOWNLOADING,
  DOWNLOADED,
  CACHED,
  FAILED,
};
CAPNP_DECLARE_ENUM(DownloadStatus, da834d53e62048b9);
CAPNP_DECLARE_SCHEMA(a677b25114d64c73);
CAPNP_DECLARE_SCHEMA(e441ce74a64693d1);
CAPNP_DECLARE_SCHEMA(e7c36e65fea112b1);
CAPNP_DECLARE_SCHEMA(af23faeb2c26a5b2);
enum class Type_af23faeb2c26a5b2: uint16_t {
  SUPERCOMBO,
  NAVIGATION,
  VISION,
  POLICY,
};
CAPNP_DECLARE_ENUM(Type, af23faeb2c26a5b2);
CAPNP_DECLARE_SCHEMA(c99c128a7e247b05);
enum class Runner_c99c128a7e247b05: uint16_t {
  SNPE,
  TINYGRAD,
  STOCK,
};
CAPNP_DECLARE_ENUM(Runner, c99c128a7e247b05);
CAPNP_DECLARE_SCHEMA(d76d000d361ae87c);
CAPNP_DECLARE_SCHEMA(e60821c0505ad473);
CAPNP_DECLARE_SCHEMA(f35cc4560bbf6ec2);
CAPNP_DECLARE_SCHEMA(bc6a5bae100ebf77);
CAPNP_DECLARE_SCHEMA(d8f6f2a7a0704037);
enum class DynamicExperimentalControlState_d8f6f2a7a0704037: uint16_t {
  ACC,
  BLENDED,
};
CAPNP_DECLARE_ENUM(DynamicExperimentalControlState, d8f6f2a7a0704037);
CAPNP_DECLARE_SCHEMA(da96579883444c35);
CAPNP_DECLARE_SCHEMA(f6e831752fcdf793);
CAPNP_DECLARE_SCHEMA(b8007ed8a646b5e6);
enum class EventName_b8007ed8a646b5e6: uint16_t {
  LKAS_ENABLE,
  LKAS_DISABLE,
  MANUAL_STEERING_REQUIRED,
  MANUAL_LONGITUDINAL_REQUIRED,
  SILENT_LKAS_ENABLE,
  SILENT_LKAS_DISABLE,
  SILENT_BRAKE_HOLD,
  SILENT_WRONG_GEAR,
  SILENT_REVERSE_GEAR,
  SILENT_DOOR_OPEN,
  SILENT_SEATBELT_NOT_LATCHED,
  SILENT_PARK_BRAKE,
  CONTROLS_MISMATCH_LATERAL,
  HYUNDAI_RADAR_TRACKS_CONFIRMED,
  EXPERIMENTAL_MODE_SWITCHED,
  WRONG_CAR_MODE_ALERT_ONLY,
  PEDAL_PRESSED_ALERT_ONLY,
};
CAPNP_DECLARE_ENUM(EventName, b8007ed8a646b5e6);
CAPNP_DECLARE_SCHEMA(80ae746ee2596b11);
CAPNP_DECLARE_SCHEMA(dafc8108312924ef);
CAPNP_DECLARE_SCHEMA(817ed0dfcd0ed40f);
CAPNP_DECLARE_SCHEMA(a5cd762cd951a455);
CAPNP_DECLARE_SCHEMA(e20e376316fa68c4);
CAPNP_DECLARE_SCHEMA(f98d843bfd7004a3);
CAPNP_DECLARE_SCHEMA(b8aa92adead100ba);
enum class Status_b8aa92adead100ba: uint16_t {
  IDLE,
  IN_PROGRESS,
  COMPLETED,
  FAILED,
};
CAPNP_DECLARE_ENUM(Status, b8aa92adead100ba);
CAPNP_DECLARE_SCHEMA(d32ef1b9d6e3cdf5);
CAPNP_DECLARE_SCHEMA(d8f4f047edce3c71);
CAPNP_DECLARE_SCHEMA(9e62278160b7df26);
CAPNP_DECLARE_SCHEMA(b86e6369214c01c8);
CAPNP_DECLARE_SCHEMA(f416ec09499d9d19);
CAPNP_DECLARE_SCHEMA(a1680744031fdb2d);
CAPNP_DECLARE_SCHEMA(cb9fd56c7057593a);
CAPNP_DECLARE_SCHEMA(c2243c65e0340384);
CAPNP_DECLARE_SCHEMA(9ccdc8676701b412);
CAPNP_DECLARE_SCHEMA(cd96dafb67a082d0);
CAPNP_DECLARE_SCHEMA(b057204d7deadf3f);
CAPNP_DECLARE_SCHEMA(bd443b539493bc68);
CAPNP_DECLARE_SCHEMA(fc6241ed8877b611);
CAPNP_DECLARE_SCHEMA(a30662f84033036c);
CAPNP_DECLARE_SCHEMA(c86a3d38d13eb3ef);
CAPNP_DECLARE_SCHEMA(a4f1eb3323f5f582);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

struct ModularAssistiveDrivingSystem {
  ModularAssistiveDrivingSystem() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ModularAssistiveDrivingSystemState_92199b6d79d06606 ModularAssistiveDrivingSystemState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd4d70bbee44938f, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SelfdriveStateSP {
  SelfdriveStateSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81c2f05a394cf4af, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP {
  ModelManagerSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct DownloadUri;
  typedef ::capnp::schemas::DownloadStatus_da834d53e62048b9 DownloadStatus;

  struct DownloadProgress;
  struct Artifact;
  struct Model;
  typedef ::capnp::schemas::Runner_c99c128a7e247b05 Runner;

  struct Override;
  struct ModelBundle;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aedffd8f31e7b55d, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::DownloadUri {
  DownloadUri() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8cbae8ae9dfe286, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::DownloadProgress {
  DownloadProgress() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a677b25114d64c73, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::Artifact {
  Artifact() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e441ce74a64693d1, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::Model {
  Model() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_af23faeb2c26a5b2 Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7c36e65fea112b1, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::Override {
  Override() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d76d000d361ae87c, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::ModelBundle {
  ModelBundle() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e60821c0505ad473, 3, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongitudinalPlanSP {
  LongitudinalPlanSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct DynamicExperimentalControl;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f35cc4560bbf6ec2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongitudinalPlanSP::DynamicExperimentalControl {
  DynamicExperimentalControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DynamicExperimentalControlState_d8f6f2a7a0704037 DynamicExperimentalControlState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc6a5bae100ebf77, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OnroadEventSP {
  OnroadEventSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Event;
  typedef ::capnp::schemas::EventName_b8007ed8a646b5e6 EventName;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da96579883444c35, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OnroadEventSP::Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6e831752fcdf793, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParamsSP {
  CarParamsSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct NeuralNetworkLateralControl;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80ae746ee2596b11, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParamsSP::NeuralNetworkLateralControl {
  NeuralNetworkLateralControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Model;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dafc8108312924ef, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParamsSP::NeuralNetworkLateralControl::Model {
  Model() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(817ed0dfcd0ed40f, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControlSP {
  CarControlSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Param;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5cd762cd951a455, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControlSP::Param {
  Param() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e20e376316fa68c4, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BackupManagerSP {
  BackupManagerSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_b8aa92adead100ba Status;

  struct Version;
  struct MetadataEntry;
  struct BackupInfo;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f98d843bfd7004a3, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BackupManagerSP::Version {
  Version() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d32ef1b9d6e3cdf5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BackupManagerSP::MetadataEntry {
  MetadataEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8f4f047edce3c71, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BackupManagerSP::BackupInfo {
  BackupInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e62278160b7df26, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarStateSP {
  CarStateSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b86e6369214c01c8, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveMapDataSP {
  LiveMapDataSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f416ec09499d9d19, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved9 {
  CustomReserved9() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1680744031fdb2d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved10 {
  CustomReserved10() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb9fd56c7057593a, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved11 {
  CustomReserved11() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2243c65e0340384, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved12 {
  CustomReserved12() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ccdc8676701b412, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved13 {
  CustomReserved13() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd96dafb67a082d0, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved14 {
  CustomReserved14() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b057204d7deadf3f, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved15 {
  CustomReserved15() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd443b539493bc68, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved16 {
  CustomReserved16() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc6241ed8877b611, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved17 {
  CustomReserved17() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a30662f84033036c, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved18 {
  CustomReserved18() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c86a3d38d13eb3ef, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved19 {
  CustomReserved19() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4f1eb3323f5f582, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ModularAssistiveDrivingSystem::Reader {
public:
  typedef ModularAssistiveDrivingSystem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState getState() const;

  inline bool getEnabled() const;

  inline bool getActive() const;

  inline bool getAvailable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModularAssistiveDrivingSystem::Builder {
public:
  typedef ModularAssistiveDrivingSystem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState getState();
  inline void setState( ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool getActive();
  inline void setActive(bool value);

  inline bool getAvailable();
  inline void setAvailable(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModularAssistiveDrivingSystem::Pipeline {
public:
  typedef ModularAssistiveDrivingSystem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SelfdriveStateSP::Reader {
public:
  typedef SelfdriveStateSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMads() const;
  inline  ::cereal::ModularAssistiveDrivingSystem::Reader getMads() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SelfdriveStateSP::Builder {
public:
  typedef SelfdriveStateSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMads();
  inline  ::cereal::ModularAssistiveDrivingSystem::Builder getMads();
  inline void setMads( ::cereal::ModularAssistiveDrivingSystem::Reader value);
  inline  ::cereal::ModularAssistiveDrivingSystem::Builder initMads();
  inline void adoptMads(::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem>&& value);
  inline ::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem> disownMads();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SelfdriveStateSP::Pipeline {
public:
  typedef SelfdriveStateSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModularAssistiveDrivingSystem::Pipeline getMads();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::Reader {
public:
  typedef ModelManagerSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasActiveBundle() const;
  inline  ::cereal::ModelManagerSP::ModelBundle::Reader getActiveBundle() const;

  inline bool hasSelectedBundle() const;
  inline  ::cereal::ModelManagerSP::ModelBundle::Reader getSelectedBundle() const;

  inline bool hasAvailableBundles() const;
  inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader getAvailableBundles() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::Builder {
public:
  typedef ModelManagerSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasActiveBundle();
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder getActiveBundle();
  inline void setActiveBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value);
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder initActiveBundle();
  inline void adoptActiveBundle(::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> disownActiveBundle();

  inline bool hasSelectedBundle();
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder getSelectedBundle();
  inline void setSelectedBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value);
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder initSelectedBundle();
  inline void adoptSelectedBundle(::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> disownSelectedBundle();

  inline bool hasAvailableBundles();
  inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder getAvailableBundles();
  inline void setAvailableBundles( ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder initAvailableBundles(unsigned int size);
  inline void adoptAvailableBundles(::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>> disownAvailableBundles();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::Pipeline {
public:
  typedef ModelManagerSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline getActiveBundle();
  inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline getSelectedBundle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::DownloadUri::Reader {
public:
  typedef DownloadUri Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline  ::capnp::Text::Reader getUri() const;

  inline bool hasSha256() const;
  inline  ::capnp::Text::Reader getSha256() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::DownloadUri::Builder {
public:
  typedef DownloadUri Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline  ::capnp::Text::Builder getUri();
  inline void setUri( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUri();

  inline bool hasSha256();
  inline  ::capnp::Text::Builder getSha256();
  inline void setSha256( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSha256(unsigned int size);
  inline void adoptSha256(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSha256();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::DownloadUri::Pipeline {
public:
  typedef DownloadUri Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::DownloadProgress::Reader {
public:
  typedef DownloadProgress Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus() const;

  inline float getProgress() const;

  inline  ::uint32_t getEta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::DownloadProgress::Builder {
public:
  typedef DownloadProgress Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus();
  inline void setStatus( ::cereal::ModelManagerSP::DownloadStatus value);

  inline float getProgress();
  inline void setProgress(float value);

  inline  ::uint32_t getEta();
  inline void setEta( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::DownloadProgress::Pipeline {
public:
  typedef DownloadProgress Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::Artifact::Reader {
public:
  typedef Artifact Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFileName() const;
  inline  ::capnp::Text::Reader getFileName() const;

  inline bool hasDownloadUri() const;
  inline  ::cereal::ModelManagerSP::DownloadUri::Reader getDownloadUri() const;

  inline bool hasDownloadProgress() const;
  inline  ::cereal::ModelManagerSP::DownloadProgress::Reader getDownloadProgress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::Artifact::Builder {
public:
  typedef Artifact Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFileName();
  inline  ::capnp::Text::Builder getFileName();
  inline void setFileName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFileName(unsigned int size);
  inline void adoptFileName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFileName();

  inline bool hasDownloadUri();
  inline  ::cereal::ModelManagerSP::DownloadUri::Builder getDownloadUri();
  inline void setDownloadUri( ::cereal::ModelManagerSP::DownloadUri::Reader value);
  inline  ::cereal::ModelManagerSP::DownloadUri::Builder initDownloadUri();
  inline void adoptDownloadUri(::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri> disownDownloadUri();

  inline bool hasDownloadProgress();
  inline  ::cereal::ModelManagerSP::DownloadProgress::Builder getDownloadProgress();
  inline void setDownloadProgress( ::cereal::ModelManagerSP::DownloadProgress::Reader value);
  inline  ::cereal::ModelManagerSP::DownloadProgress::Builder initDownloadProgress();
  inline void adoptDownloadProgress(::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress> disownDownloadProgress();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::Artifact::Pipeline {
public:
  typedef Artifact Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelManagerSP::DownloadUri::Pipeline getDownloadUri();
  inline  ::cereal::ModelManagerSP::DownloadProgress::Pipeline getDownloadProgress();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::Model::Reader {
public:
  typedef Model Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModelManagerSP::Model::Type getType() const;

  inline bool hasArtifact() const;
  inline  ::cereal::ModelManagerSP::Artifact::Reader getArtifact() const;

  inline bool hasMetadata() const;
  inline  ::cereal::ModelManagerSP::Artifact::Reader getMetadata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::Model::Builder {
public:
  typedef Model Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModelManagerSP::Model::Type getType();
  inline void setType( ::cereal::ModelManagerSP::Model::Type value);

  inline bool hasArtifact();
  inline  ::cereal::ModelManagerSP::Artifact::Builder getArtifact();
  inline void setArtifact( ::cereal::ModelManagerSP::Artifact::Reader value);
  inline  ::cereal::ModelManagerSP::Artifact::Builder initArtifact();
  inline void adoptArtifact(::capnp::Orphan< ::cereal::ModelManagerSP::Artifact>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::Artifact> disownArtifact();

  inline bool hasMetadata();
  inline  ::cereal::ModelManagerSP::Artifact::Builder getMetadata();
  inline void setMetadata( ::cereal::ModelManagerSP::Artifact::Reader value);
  inline  ::cereal::ModelManagerSP::Artifact::Builder initMetadata();
  inline void adoptMetadata(::capnp::Orphan< ::cereal::ModelManagerSP::Artifact>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::Artifact> disownMetadata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::Model::Pipeline {
public:
  typedef Model Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelManagerSP::Artifact::Pipeline getArtifact();
  inline  ::cereal::ModelManagerSP::Artifact::Pipeline getMetadata();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::Override::Reader {
public:
  typedef Override Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::Override::Builder {
public:
  typedef Override Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::Override::Pipeline {
public:
  typedef Override Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::ModelBundle::Reader {
public:
  typedef ModelBundle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getIndex() const;

  inline bool hasInternalName() const;
  inline  ::capnp::Text::Reader getInternalName() const;

  inline bool hasDisplayName() const;
  inline  ::capnp::Text::Reader getDisplayName() const;

  inline bool hasModels() const;
  inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader getModels() const;

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus() const;

  inline  ::uint32_t getGeneration() const;

  inline bool hasEnvironment() const;
  inline  ::capnp::Text::Reader getEnvironment() const;

  inline  ::cereal::ModelManagerSP::Runner getRunner() const;

  inline bool getIs20hz() const;

  inline bool hasRef() const;
  inline  ::capnp::Text::Reader getRef() const;

  inline  ::uint32_t getMinimumSelectorVersion() const;

  inline bool hasOverrides() const;
  inline  ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Reader getOverrides() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::ModelBundle::Builder {
public:
  typedef ModelBundle Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getIndex();
  inline void setIndex( ::uint32_t value);

  inline bool hasInternalName();
  inline  ::capnp::Text::Builder getInternalName();
  inline void setInternalName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInternalName(unsigned int size);
  inline void adoptInternalName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInternalName();

  inline bool hasDisplayName();
  inline  ::capnp::Text::Builder getDisplayName();
  inline void setDisplayName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDisplayName(unsigned int size);
  inline void adoptDisplayName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDisplayName();

  inline bool hasModels();
  inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder getModels();
  inline void setModels( ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder initModels(unsigned int size);
  inline void adoptModels(::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>> disownModels();

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus();
  inline void setStatus( ::cereal::ModelManagerSP::DownloadStatus value);

  inline  ::uint32_t getGeneration();
  inline void setGeneration( ::uint32_t value);

  inline bool hasEnvironment();
  inline  ::capnp::Text::Builder getEnvironment();
  inline void setEnvironment( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEnvironment(unsigned int size);
  inline void adoptEnvironment(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEnvironment();

  inline  ::cereal::ModelManagerSP::Runner getRunner();
  inline void setRunner( ::cereal::ModelManagerSP::Runner value);

  inline bool getIs20hz();
  inline void setIs20hz(bool value);

  inline bool hasRef();
  inline  ::capnp::Text::Builder getRef();
  inline void setRef( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRef(unsigned int size);
  inline void adoptRef(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRef();

  inline  ::uint32_t getMinimumSelectorVersion();
  inline void setMinimumSelectorVersion( ::uint32_t value);

  inline bool hasOverrides();
  inline  ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Builder getOverrides();
  inline void setOverrides( ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Builder initOverrides(unsigned int size);
  inline void adoptOverrides(::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>> disownOverrides();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::ModelBundle::Pipeline {
public:
  typedef ModelBundle Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongitudinalPlanSP::Reader {
public:
  typedef LongitudinalPlanSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDec() const;
  inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Reader getDec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongitudinalPlanSP::Builder {
public:
  typedef LongitudinalPlanSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDec();
  inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Builder getDec();
  inline void setDec( ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Reader value);
  inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Builder initDec();
  inline void adoptDec(::capnp::Orphan< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>&& value);
  inline ::capnp::Orphan< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl> disownDec();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongitudinalPlanSP::Pipeline {
public:
  typedef LongitudinalPlanSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Pipeline getDec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongitudinalPlanSP::DynamicExperimentalControl::Reader {
public:
  typedef DynamicExperimentalControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState getState() const;

  inline bool getEnabled() const;

  inline bool getActive() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongitudinalPlanSP::DynamicExperimentalControl::Builder {
public:
  typedef DynamicExperimentalControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState getState();
  inline void setState( ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool getActive();
  inline void setActive(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongitudinalPlanSP::DynamicExperimentalControl::Pipeline {
public:
  typedef DynamicExperimentalControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OnroadEventSP::Reader {
public:
  typedef OnroadEventSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEvents() const;
  inline  ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Reader getEvents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OnroadEventSP::Builder {
public:
  typedef OnroadEventSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvents();
  inline  ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>> disownEvents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OnroadEventSP::Pipeline {
public:
  typedef OnroadEventSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OnroadEventSP::Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::OnroadEventSP::EventName getName() const;

  inline bool getEnable() const;

  inline bool getNoEntry() const;

  inline bool getWarning() const;

  inline bool getUserDisable() const;

  inline bool getSoftDisable() const;

  inline bool getImmediateDisable() const;

  inline bool getPreEnable() const;

  inline bool getPermanent() const;

  inline bool getOverrideLongitudinal() const;

  inline bool getOverrideLateral() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OnroadEventSP::Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::OnroadEventSP::EventName getName();
  inline void setName( ::cereal::OnroadEventSP::EventName value);

  inline bool getEnable();
  inline void setEnable(bool value);

  inline bool getNoEntry();
  inline void setNoEntry(bool value);

  inline bool getWarning();
  inline void setWarning(bool value);

  inline bool getUserDisable();
  inline void setUserDisable(bool value);

  inline bool getSoftDisable();
  inline void setSoftDisable(bool value);

  inline bool getImmediateDisable();
  inline void setImmediateDisable(bool value);

  inline bool getPreEnable();
  inline void setPreEnable(bool value);

  inline bool getPermanent();
  inline void setPermanent(bool value);

  inline bool getOverrideLongitudinal();
  inline void setOverrideLongitudinal(bool value);

  inline bool getOverrideLateral();
  inline void setOverrideLateral(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OnroadEventSP::Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParamsSP::Reader {
public:
  typedef CarParamsSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags() const;

  inline  ::int16_t getSafetyParam() const;

  inline bool hasNeuralNetworkLateralControl() const;
  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Reader getNeuralNetworkLateralControl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParamsSP::Builder {
public:
  typedef CarParamsSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline  ::int16_t getSafetyParam();
  inline void setSafetyParam( ::int16_t value);

  inline bool hasNeuralNetworkLateralControl();
  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Builder getNeuralNetworkLateralControl();
  inline void setNeuralNetworkLateralControl( ::cereal::CarParamsSP::NeuralNetworkLateralControl::Reader value);
  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Builder initNeuralNetworkLateralControl();
  inline void adoptNeuralNetworkLateralControl(::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl> disownNeuralNetworkLateralControl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParamsSP::Pipeline {
public:
  typedef CarParamsSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Pipeline getNeuralNetworkLateralControl();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParamsSP::NeuralNetworkLateralControl::Reader {
public:
  typedef NeuralNetworkLateralControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasModel() const;
  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Reader getModel() const;

  inline bool getFuzzyFingerprint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParamsSP::NeuralNetworkLateralControl::Builder {
public:
  typedef NeuralNetworkLateralControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasModel();
  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Builder getModel();
  inline void setModel( ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Reader value);
  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Builder initModel();
  inline void adoptModel(::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>&& value);
  inline ::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model> disownModel();

  inline bool getFuzzyFingerprint();
  inline void setFuzzyFingerprint(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParamsSP::NeuralNetworkLateralControl::Pipeline {
public:
  typedef NeuralNetworkLateralControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Pipeline getModel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParamsSP::NeuralNetworkLateralControl::Model::Reader {
public:
  typedef Model Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParamsSP::NeuralNetworkLateralControl::Model::Builder {
public:
  typedef Model Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParamsSP::NeuralNetworkLateralControl::Model::Pipeline {
public:
  typedef Model Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControlSP::Reader {
public:
  typedef CarControlSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMads() const;
  inline  ::cereal::ModularAssistiveDrivingSystem::Reader getMads() const;

  inline bool hasParams() const;
  inline  ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControlSP::Builder {
public:
  typedef CarControlSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMads();
  inline  ::cereal::ModularAssistiveDrivingSystem::Builder getMads();
  inline void setMads( ::cereal::ModularAssistiveDrivingSystem::Reader value);
  inline  ::cereal::ModularAssistiveDrivingSystem::Builder initMads();
  inline void adoptMads(::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem>&& value);
  inline ::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem> disownMads();

  inline bool hasParams();
  inline  ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Builder getParams();
  inline void setParams( ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Builder initParams(unsigned int size);
  inline void adoptParams(::capnp::Orphan< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControlSP::Pipeline {
public:
  typedef CarControlSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModularAssistiveDrivingSystem::Pipeline getMads();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControlSP::Param::Reader {
public:
  typedef Param Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControlSP::Param::Builder {
public:
  typedef Param Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControlSP::Param::Pipeline {
public:
  typedef Param Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupManagerSP::Reader {
public:
  typedef BackupManagerSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::BackupManagerSP::Status getBackupStatus() const;

  inline  ::cereal::BackupManagerSP::Status getRestoreStatus() const;

  inline float getBackupProgress() const;

  inline float getRestoreProgress() const;

  inline bool hasLastError() const;
  inline  ::capnp::Text::Reader getLastError() const;

  inline bool hasCurrentBackup() const;
  inline  ::cereal::BackupManagerSP::BackupInfo::Reader getCurrentBackup() const;

  inline bool hasBackupHistory() const;
  inline  ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Reader getBackupHistory() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupManagerSP::Builder {
public:
  typedef BackupManagerSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::BackupManagerSP::Status getBackupStatus();
  inline void setBackupStatus( ::cereal::BackupManagerSP::Status value);

  inline  ::cereal::BackupManagerSP::Status getRestoreStatus();
  inline void setRestoreStatus( ::cereal::BackupManagerSP::Status value);

  inline float getBackupProgress();
  inline void setBackupProgress(float value);

  inline float getRestoreProgress();
  inline void setRestoreProgress(float value);

  inline bool hasLastError();
  inline  ::capnp::Text::Builder getLastError();
  inline void setLastError( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLastError(unsigned int size);
  inline void adoptLastError(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLastError();

  inline bool hasCurrentBackup();
  inline  ::cereal::BackupManagerSP::BackupInfo::Builder getCurrentBackup();
  inline void setCurrentBackup( ::cereal::BackupManagerSP::BackupInfo::Reader value);
  inline  ::cereal::BackupManagerSP::BackupInfo::Builder initCurrentBackup();
  inline void adoptCurrentBackup(::capnp::Orphan< ::cereal::BackupManagerSP::BackupInfo>&& value);
  inline ::capnp::Orphan< ::cereal::BackupManagerSP::BackupInfo> disownCurrentBackup();

  inline bool hasBackupHistory();
  inline  ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Builder getBackupHistory();
  inline void setBackupHistory( ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Builder initBackupHistory(unsigned int size);
  inline void adoptBackupHistory(::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>> disownBackupHistory();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupManagerSP::Pipeline {
public:
  typedef BackupManagerSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::BackupManagerSP::BackupInfo::Pipeline getCurrentBackup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupManagerSP::Version::Reader {
public:
  typedef Version Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getMajor() const;

  inline  ::uint16_t getMinor() const;

  inline  ::uint16_t getPatch() const;

  inline  ::uint16_t getBuild() const;

  inline bool hasBranch() const;
  inline  ::capnp::Text::Reader getBranch() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupManagerSP::Version::Builder {
public:
  typedef Version Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getMajor();
  inline void setMajor( ::uint16_t value);

  inline  ::uint16_t getMinor();
  inline void setMinor( ::uint16_t value);

  inline  ::uint16_t getPatch();
  inline void setPatch( ::uint16_t value);

  inline  ::uint16_t getBuild();
  inline void setBuild( ::uint16_t value);

  inline bool hasBranch();
  inline  ::capnp::Text::Builder getBranch();
  inline void setBranch( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBranch(unsigned int size);
  inline void adoptBranch(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBranch();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupManagerSP::Version::Pipeline {
public:
  typedef Version Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupManagerSP::MetadataEntry::Reader {
public:
  typedef MetadataEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline bool hasTags() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getTags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupManagerSP::MetadataEntry::Builder {
public:
  typedef MetadataEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline bool hasTags();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getTags();
  inline void setTags( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setTags(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initTags(unsigned int size);
  inline void adoptTags(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownTags();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupManagerSP::MetadataEntry::Pipeline {
public:
  typedef MetadataEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupManagerSP::BackupInfo::Reader {
public:
  typedef BackupInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDeviceId() const;
  inline  ::capnp::Text::Reader getDeviceId() const;

  inline  ::uint32_t getVersion() const;

  inline bool hasConfig() const;
  inline  ::capnp::Text::Reader getConfig() const;

  inline bool getIsEncrypted() const;

  inline bool hasCreatedAt() const;
  inline  ::capnp::Text::Reader getCreatedAt() const;

  inline bool hasUpdatedAt() const;
  inline  ::capnp::Text::Reader getUpdatedAt() const;

  inline bool hasSunnypilotVersion() const;
  inline  ::cereal::BackupManagerSP::Version::Reader getSunnypilotVersion() const;

  inline bool hasBackupMetadata() const;
  inline  ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Reader getBackupMetadata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupManagerSP::BackupInfo::Builder {
public:
  typedef BackupInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDeviceId();
  inline  ::capnp::Text::Builder getDeviceId();
  inline void setDeviceId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDeviceId(unsigned int size);
  inline void adoptDeviceId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDeviceId();

  inline  ::uint32_t getVersion();
  inline void setVersion( ::uint32_t value);

  inline bool hasConfig();
  inline  ::capnp::Text::Builder getConfig();
  inline void setConfig( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initConfig(unsigned int size);
  inline void adoptConfig(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownConfig();

  inline bool getIsEncrypted();
  inline void setIsEncrypted(bool value);

  inline bool hasCreatedAt();
  inline  ::capnp::Text::Builder getCreatedAt();
  inline void setCreatedAt( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCreatedAt(unsigned int size);
  inline void adoptCreatedAt(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCreatedAt();

  inline bool hasUpdatedAt();
  inline  ::capnp::Text::Builder getUpdatedAt();
  inline void setUpdatedAt( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUpdatedAt(unsigned int size);
  inline void adoptUpdatedAt(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUpdatedAt();

  inline bool hasSunnypilotVersion();
  inline  ::cereal::BackupManagerSP::Version::Builder getSunnypilotVersion();
  inline void setSunnypilotVersion( ::cereal::BackupManagerSP::Version::Reader value);
  inline  ::cereal::BackupManagerSP::Version::Builder initSunnypilotVersion();
  inline void adoptSunnypilotVersion(::capnp::Orphan< ::cereal::BackupManagerSP::Version>&& value);
  inline ::capnp::Orphan< ::cereal::BackupManagerSP::Version> disownSunnypilotVersion();

  inline bool hasBackupMetadata();
  inline  ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Builder getBackupMetadata();
  inline void setBackupMetadata( ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Builder initBackupMetadata(unsigned int size);
  inline void adoptBackupMetadata(::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>> disownBackupMetadata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupManagerSP::BackupInfo::Pipeline {
public:
  typedef BackupInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::BackupManagerSP::Version::Pipeline getSunnypilotVersion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarStateSP::Reader {
public:
  typedef CarStateSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarStateSP::Builder {
public:
  typedef CarStateSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarStateSP::Pipeline {
public:
  typedef CarStateSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveMapDataSP::Reader {
public:
  typedef LiveMapDataSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid() const;

  inline float getSpeedLimit() const;

  inline bool getSpeedLimitAheadValid() const;

  inline float getSpeedLimitAhead() const;

  inline float getSpeedLimitAheadDistance() const;

  inline bool hasRoadName() const;
  inline  ::capnp::Text::Reader getRoadName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveMapDataSP::Builder {
public:
  typedef LiveMapDataSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid();
  inline void setSpeedLimitValid(bool value);

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline bool getSpeedLimitAheadValid();
  inline void setSpeedLimitAheadValid(bool value);

  inline float getSpeedLimitAhead();
  inline void setSpeedLimitAhead(float value);

  inline float getSpeedLimitAheadDistance();
  inline void setSpeedLimitAheadDistance(float value);

  inline bool hasRoadName();
  inline  ::capnp::Text::Builder getRoadName();
  inline void setRoadName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRoadName(unsigned int size);
  inline void adoptRoadName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRoadName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveMapDataSP::Pipeline {
public:
  typedef LiveMapDataSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved9::Reader {
public:
  typedef CustomReserved9 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved9::Builder {
public:
  typedef CustomReserved9 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved9::Pipeline {
public:
  typedef CustomReserved9 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved10::Reader {
public:
  typedef CustomReserved10 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved10::Builder {
public:
  typedef CustomReserved10 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved10::Pipeline {
public:
  typedef CustomReserved10 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved11::Reader {
public:
  typedef CustomReserved11 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved11::Builder {
public:
  typedef CustomReserved11 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved11::Pipeline {
public:
  typedef CustomReserved11 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved12::Reader {
public:
  typedef CustomReserved12 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved12::Builder {
public:
  typedef CustomReserved12 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved12::Pipeline {
public:
  typedef CustomReserved12 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved13::Reader {
public:
  typedef CustomReserved13 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved13::Builder {
public:
  typedef CustomReserved13 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved13::Pipeline {
public:
  typedef CustomReserved13 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved14::Reader {
public:
  typedef CustomReserved14 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved14::Builder {
public:
  typedef CustomReserved14 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved14::Pipeline {
public:
  typedef CustomReserved14 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved15::Reader {
public:
  typedef CustomReserved15 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved15::Builder {
public:
  typedef CustomReserved15 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved15::Pipeline {
public:
  typedef CustomReserved15 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved16::Reader {
public:
  typedef CustomReserved16 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved16::Builder {
public:
  typedef CustomReserved16 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved16::Pipeline {
public:
  typedef CustomReserved16 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved17::Reader {
public:
  typedef CustomReserved17 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved17::Builder {
public:
  typedef CustomReserved17 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved17::Pipeline {
public:
  typedef CustomReserved17 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved18::Reader {
public:
  typedef CustomReserved18 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved18::Builder {
public:
  typedef CustomReserved18 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved18::Pipeline {
public:
  typedef CustomReserved18 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved19::Reader {
public:
  typedef CustomReserved19 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved19::Builder {
public:
  typedef CustomReserved19 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved19::Pipeline {
public:
  typedef CustomReserved19 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState ModularAssistiveDrivingSystem::Reader::getState() const {
  return _reader.getDataField< ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState ModularAssistiveDrivingSystem::Builder::getState() {
  return _builder.getDataField< ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModularAssistiveDrivingSystem::Builder::setState( ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState value) {
  _builder.setDataField< ::cereal::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModularAssistiveDrivingSystem::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool ModularAssistiveDrivingSystem::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ModularAssistiveDrivingSystem::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool ModularAssistiveDrivingSystem::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool ModularAssistiveDrivingSystem::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void ModularAssistiveDrivingSystem::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool ModularAssistiveDrivingSystem::Reader::getAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool ModularAssistiveDrivingSystem::Builder::getAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void ModularAssistiveDrivingSystem::Builder::setAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveStateSP::Reader::hasMads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SelfdriveStateSP::Builder::hasMads() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModularAssistiveDrivingSystem::Reader SelfdriveStateSP::Reader::getMads() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModularAssistiveDrivingSystem::Builder SelfdriveStateSP::Builder::getMads() {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModularAssistiveDrivingSystem::Pipeline SelfdriveStateSP::Pipeline::getMads() {
  return  ::cereal::ModularAssistiveDrivingSystem::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SelfdriveStateSP::Builder::setMads( ::cereal::ModularAssistiveDrivingSystem::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModularAssistiveDrivingSystem::Builder SelfdriveStateSP::Builder::initMads() {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SelfdriveStateSP::Builder::adoptMads(
    ::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem> SelfdriveStateSP::Builder::disownMads() {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Reader::hasActiveBundle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Builder::hasActiveBundle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::ModelBundle::Reader ModelManagerSP::Reader::getActiveBundle() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::getActiveBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline ModelManagerSP::Pipeline::getActiveBundle() {
  return  ::cereal::ModelManagerSP::ModelBundle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Builder::setActiveBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::initActiveBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Builder::adoptActiveBundle(
    ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> ModelManagerSP::Builder::disownActiveBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Reader::hasSelectedBundle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Builder::hasSelectedBundle() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::ModelBundle::Reader ModelManagerSP::Reader::getSelectedBundle() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::getSelectedBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline ModelManagerSP::Pipeline::getSelectedBundle() {
  return  ::cereal::ModelManagerSP::ModelBundle::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Builder::setSelectedBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::initSelectedBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Builder::adoptSelectedBundle(
    ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> ModelManagerSP::Builder::disownSelectedBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Reader::hasAvailableBundles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Builder::hasAvailableBundles() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader ModelManagerSP::Reader::getAvailableBundles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::Builder::getAvailableBundles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Builder::setAvailableBundles( ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::Builder::initAvailableBundles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::Builder::adoptAvailableBundles(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>> ModelManagerSP::Builder::disownAvailableBundles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::DownloadUri::Reader::hasUri() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::DownloadUri::Builder::hasUri() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::DownloadUri::Reader::getUri() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::getUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::DownloadUri::Builder::setUri( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::DownloadUri::Builder::adoptUri(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::DownloadUri::Builder::disownUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::DownloadUri::Reader::hasSha256() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::DownloadUri::Builder::hasSha256() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::DownloadUri::Reader::getSha256() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::getSha256() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::DownloadUri::Builder::setSha256( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::initSha256(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::DownloadUri::Builder::adoptSha256(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::DownloadUri::Builder::disownSha256() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::DownloadProgress::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::DownloadProgress::Builder::getStatus() {
  return _builder.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::DownloadProgress::Builder::setStatus( ::cereal::ModelManagerSP::DownloadStatus value) {
  _builder.setDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelManagerSP::DownloadProgress::Reader::getProgress() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelManagerSP::DownloadProgress::Builder::getProgress() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::DownloadProgress::Builder::setProgress(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelManagerSP::DownloadProgress::Reader::getEta() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelManagerSP::DownloadProgress::Builder::getEta() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::DownloadProgress::Builder::setEta( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::Artifact::Reader::hasFileName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Artifact::Builder::hasFileName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::Artifact::Reader::getFileName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::Artifact::Builder::getFileName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Artifact::Builder::setFileName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::Artifact::Builder::initFileName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::Artifact::Builder::adoptFileName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::Artifact::Builder::disownFileName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Artifact::Reader::hasDownloadUri() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Artifact::Builder::hasDownloadUri() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::DownloadUri::Reader ModelManagerSP::Artifact::Reader::getDownloadUri() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::DownloadUri::Builder ModelManagerSP::Artifact::Builder::getDownloadUri() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::DownloadUri::Pipeline ModelManagerSP::Artifact::Pipeline::getDownloadUri() {
  return  ::cereal::ModelManagerSP::DownloadUri::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Artifact::Builder::setDownloadUri( ::cereal::ModelManagerSP::DownloadUri::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::DownloadUri::Builder ModelManagerSP::Artifact::Builder::initDownloadUri() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Artifact::Builder::adoptDownloadUri(
    ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri> ModelManagerSP::Artifact::Builder::disownDownloadUri() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Artifact::Reader::hasDownloadProgress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Artifact::Builder::hasDownloadProgress() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::DownloadProgress::Reader ModelManagerSP::Artifact::Reader::getDownloadProgress() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::DownloadProgress::Builder ModelManagerSP::Artifact::Builder::getDownloadProgress() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::DownloadProgress::Pipeline ModelManagerSP::Artifact::Pipeline::getDownloadProgress() {
  return  ::cereal::ModelManagerSP::DownloadProgress::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Artifact::Builder::setDownloadProgress( ::cereal::ModelManagerSP::DownloadProgress::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::DownloadProgress::Builder ModelManagerSP::Artifact::Builder::initDownloadProgress() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Artifact::Builder::adoptDownloadProgress(
    ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress> ModelManagerSP::Artifact::Builder::disownDownloadProgress() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::ModelManagerSP::Model::Type ModelManagerSP::Model::Reader::getType() const {
  return _reader.getDataField< ::cereal::ModelManagerSP::Model::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelManagerSP::Model::Type ModelManagerSP::Model::Builder::getType() {
  return _builder.getDataField< ::cereal::ModelManagerSP::Model::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::Model::Builder::setType( ::cereal::ModelManagerSP::Model::Type value) {
  _builder.setDataField< ::cereal::ModelManagerSP::Model::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::Model::Reader::hasArtifact() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Model::Builder::hasArtifact() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::Artifact::Reader ModelManagerSP::Model::Reader::getArtifact() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::Artifact::Builder ModelManagerSP::Model::Builder::getArtifact() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::Artifact::Pipeline ModelManagerSP::Model::Pipeline::getArtifact() {
  return  ::cereal::ModelManagerSP::Artifact::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Model::Builder::setArtifact( ::cereal::ModelManagerSP::Artifact::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::Artifact::Builder ModelManagerSP::Model::Builder::initArtifact() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Model::Builder::adoptArtifact(
    ::capnp::Orphan< ::cereal::ModelManagerSP::Artifact>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::Artifact> ModelManagerSP::Model::Builder::disownArtifact() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Model::Reader::hasMetadata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Model::Builder::hasMetadata() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::Artifact::Reader ModelManagerSP::Model::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::Artifact::Builder ModelManagerSP::Model::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::Artifact::Pipeline ModelManagerSP::Model::Pipeline::getMetadata() {
  return  ::cereal::ModelManagerSP::Artifact::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Model::Builder::setMetadata( ::cereal::ModelManagerSP::Artifact::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::Artifact::Builder ModelManagerSP::Model::Builder::initMetadata() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Model::Builder::adoptMetadata(
    ::capnp::Orphan< ::cereal::ModelManagerSP::Artifact>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::Artifact> ModelManagerSP::Model::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::Artifact>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Override::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Override::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::Override::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::Override::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Override::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::Override::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::Override::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::Override::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Override::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Override::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::Override::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::Override::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Override::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::Override::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::Override::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::Override::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Reader::getIndex() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Builder::getIndex() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setIndex( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::ModelBundle::Reader::hasInternalName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasInternalName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::ModelBundle::Reader::getInternalName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::getInternalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setInternalName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::initInternalName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptInternalName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::ModelBundle::Builder::disownInternalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::ModelBundle::Reader::hasDisplayName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasDisplayName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::ModelBundle::Reader::getDisplayName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::getDisplayName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setDisplayName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::initDisplayName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptDisplayName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::ModelBundle::Builder::disownDisplayName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::ModelBundle::Reader::hasModels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasModels() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader ModelManagerSP::ModelBundle::Reader::getModels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::ModelBundle::Builder::getModels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setModels( ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::ModelBundle::Builder::initModels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptModels(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>> ModelManagerSP::ModelBundle::Builder::disownModels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::ModelBundle::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::ModelBundle::Builder::getStatus() {
  return _builder.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setStatus( ::cereal::ModelManagerSP::DownloadStatus value) {
  _builder.setDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Reader::getGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Builder::getGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::ModelBundle::Reader::hasEnvironment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasEnvironment() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::ModelBundle::Reader::getEnvironment() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::getEnvironment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setEnvironment( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::initEnvironment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptEnvironment(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::ModelBundle::Builder::disownEnvironment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::cereal::ModelManagerSP::Runner ModelManagerSP::ModelBundle::Reader::getRunner() const {
  return _reader.getDataField< ::cereal::ModelManagerSP::Runner>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelManagerSP::Runner ModelManagerSP::ModelBundle::Builder::getRunner() {
  return _builder.getDataField< ::cereal::ModelManagerSP::Runner>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setRunner( ::cereal::ModelManagerSP::Runner value) {
  _builder.setDataField< ::cereal::ModelManagerSP::Runner>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::ModelBundle::Reader::getIs20hz() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool ModelManagerSP::ModelBundle::Builder::getIs20hz() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setIs20hz(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::ModelBundle::Reader::hasRef() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasRef() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::ModelBundle::Reader::getRef() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::getRef() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setRef( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::initRef(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptRef(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::ModelBundle::Builder::disownRef() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Reader::getMinimumSelectorVersion() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Builder::getMinimumSelectorVersion() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setMinimumSelectorVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::ModelBundle::Reader::hasOverrides() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasOverrides() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Reader ModelManagerSP::ModelBundle::Reader::getOverrides() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::ModelBundle::Builder::getOverrides() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setOverrides( ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::ModelBundle::Builder::initOverrides(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptOverrides(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>> ModelManagerSP::ModelBundle::Builder::disownOverrides() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Override,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlanSP::Reader::hasDec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlanSP::Builder::hasDec() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Reader LongitudinalPlanSP::Reader::getDec() const {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Builder LongitudinalPlanSP::Builder::getDec() {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Pipeline LongitudinalPlanSP::Pipeline::getDec() {
  return  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LongitudinalPlanSP::Builder::setDec( ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::Builder LongitudinalPlanSP::Builder::initDec() {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LongitudinalPlanSP::Builder::adoptDec(
    ::capnp::Orphan< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl> LongitudinalPlanSP::Builder::disownDec() {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState LongitudinalPlanSP::DynamicExperimentalControl::Reader::getState() const {
  return _reader.getDataField< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState LongitudinalPlanSP::DynamicExperimentalControl::Builder::getState() {
  return _builder.getDataField< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::DynamicExperimentalControl::Builder::setState( ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState value) {
  _builder.setDataField< ::cereal::LongitudinalPlanSP::DynamicExperimentalControl::DynamicExperimentalControlState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlanSP::DynamicExperimentalControl::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlanSP::DynamicExperimentalControl::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::DynamicExperimentalControl::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlanSP::DynamicExperimentalControl::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlanSP::DynamicExperimentalControl::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::DynamicExperimentalControl::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OnroadEventSP::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Reader OnroadEventSP::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Builder OnroadEventSP::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OnroadEventSP::Builder::setEvents( ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>::Builder OnroadEventSP::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OnroadEventSP::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>> OnroadEventSP::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventSP::Event,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::OnroadEventSP::EventName OnroadEventSP::Event::Reader::getName() const {
  return _reader.getDataField< ::cereal::OnroadEventSP::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::OnroadEventSP::EventName OnroadEventSP::Event::Builder::getName() {
  return _builder.getDataField< ::cereal::OnroadEventSP::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setName( ::cereal::OnroadEventSP::EventName value) {
  _builder.setDataField< ::cereal::OnroadEventSP::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getNoEntry() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getNoEntry() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setNoEntry(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getUserDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getUserDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setUserDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getSoftDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getSoftDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setSoftDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getImmediateDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getImmediateDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setImmediateDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getPreEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getPreEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setPreEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getPermanent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getPermanent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setPermanent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getOverrideLongitudinal() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getOverrideLongitudinal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setOverrideLongitudinal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventSP::Event::Reader::getOverrideLateral() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventSP::Event::Builder::getOverrideLateral() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void OnroadEventSP::Event::Builder::setOverrideLateral(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CarParamsSP::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParamsSP::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParamsSP::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParamsSP::Reader::getSafetyParam() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParamsSP::Builder::getSafetyParam() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParamsSP::Builder::setSafetyParam( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParamsSP::Reader::hasNeuralNetworkLateralControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParamsSP::Builder::hasNeuralNetworkLateralControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Reader CarParamsSP::Reader::getNeuralNetworkLateralControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Builder CarParamsSP::Builder::getNeuralNetworkLateralControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Pipeline CarParamsSP::Pipeline::getNeuralNetworkLateralControl() {
  return  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarParamsSP::Builder::setNeuralNetworkLateralControl( ::cereal::CarParamsSP::NeuralNetworkLateralControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Builder CarParamsSP::Builder::initNeuralNetworkLateralControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParamsSP::Builder::adoptNeuralNetworkLateralControl(
    ::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl> CarParamsSP::Builder::disownNeuralNetworkLateralControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParamsSP::NeuralNetworkLateralControl::Reader::hasModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParamsSP::NeuralNetworkLateralControl::Builder::hasModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Reader CarParamsSP::NeuralNetworkLateralControl::Reader::getModel() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Builder CarParamsSP::NeuralNetworkLateralControl::Builder::getModel() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Pipeline CarParamsSP::NeuralNetworkLateralControl::Pipeline::getModel() {
  return  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarParamsSP::NeuralNetworkLateralControl::Builder::setModel( ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model::Builder CarParamsSP::NeuralNetworkLateralControl::Builder::initModel() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParamsSP::NeuralNetworkLateralControl::Builder::adoptModel(
    ::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model> CarParamsSP::NeuralNetworkLateralControl::Builder::disownModel() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParamsSP::NeuralNetworkLateralControl::Model>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParamsSP::NeuralNetworkLateralControl::Reader::getFuzzyFingerprint() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarParamsSP::NeuralNetworkLateralControl::Builder::getFuzzyFingerprint() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParamsSP::NeuralNetworkLateralControl::Builder::setFuzzyFingerprint(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParamsSP::NeuralNetworkLateralControl::Model::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParamsSP::NeuralNetworkLateralControl::Model::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParamsSP::NeuralNetworkLateralControl::Model::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParamsSP::NeuralNetworkLateralControl::Model::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParamsSP::NeuralNetworkLateralControl::Model::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParamsSP::NeuralNetworkLateralControl::Model::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParamsSP::NeuralNetworkLateralControl::Model::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParamsSP::NeuralNetworkLateralControl::Model::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParamsSP::NeuralNetworkLateralControl::Model::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParamsSP::NeuralNetworkLateralControl::Model::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParamsSP::NeuralNetworkLateralControl::Model::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParamsSP::NeuralNetworkLateralControl::Model::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParamsSP::NeuralNetworkLateralControl::Model::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParamsSP::NeuralNetworkLateralControl::Model::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParamsSP::NeuralNetworkLateralControl::Model::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParamsSP::NeuralNetworkLateralControl::Model::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarControlSP::Reader::hasMads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarControlSP::Builder::hasMads() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModularAssistiveDrivingSystem::Reader CarControlSP::Reader::getMads() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModularAssistiveDrivingSystem::Builder CarControlSP::Builder::getMads() {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModularAssistiveDrivingSystem::Pipeline CarControlSP::Pipeline::getMads() {
  return  ::cereal::ModularAssistiveDrivingSystem::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarControlSP::Builder::setMads( ::cereal::ModularAssistiveDrivingSystem::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModularAssistiveDrivingSystem::Builder CarControlSP::Builder::initMads() {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarControlSP::Builder::adoptMads(
    ::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModularAssistiveDrivingSystem> CarControlSP::Builder::disownMads() {
  return ::capnp::_::PointerHelpers< ::cereal::ModularAssistiveDrivingSystem>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarControlSP::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarControlSP::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Reader CarControlSP::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Builder CarControlSP::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarControlSP::Builder::setParams( ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>::Builder CarControlSP::Builder::initParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarControlSP::Builder::adoptParams(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>> CarControlSP::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarControlSP::Param,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarControlSP::Param::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarControlSP::Param::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarControlSP::Param::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarControlSP::Param::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarControlSP::Param::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarControlSP::Param::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarControlSP::Param::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarControlSP::Param::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarControlSP::Param::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarControlSP::Param::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarControlSP::Param::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarControlSP::Param::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarControlSP::Param::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarControlSP::Param::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarControlSP::Param::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarControlSP::Param::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cereal::BackupManagerSP::Status BackupManagerSP::Reader::getBackupStatus() const {
  return _reader.getDataField< ::cereal::BackupManagerSP::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::BackupManagerSP::Status BackupManagerSP::Builder::getBackupStatus() {
  return _builder.getDataField< ::cereal::BackupManagerSP::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Builder::setBackupStatus( ::cereal::BackupManagerSP::Status value) {
  _builder.setDataField< ::cereal::BackupManagerSP::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::BackupManagerSP::Status BackupManagerSP::Reader::getRestoreStatus() const {
  return _reader.getDataField< ::cereal::BackupManagerSP::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::BackupManagerSP::Status BackupManagerSP::Builder::getRestoreStatus() {
  return _builder.getDataField< ::cereal::BackupManagerSP::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Builder::setRestoreStatus( ::cereal::BackupManagerSP::Status value) {
  _builder.setDataField< ::cereal::BackupManagerSP::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float BackupManagerSP::Reader::getBackupProgress() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float BackupManagerSP::Builder::getBackupProgress() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Builder::setBackupProgress(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float BackupManagerSP::Reader::getRestoreProgress() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float BackupManagerSP::Builder::getRestoreProgress() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Builder::setRestoreProgress(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool BackupManagerSP::Reader::hasLastError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::Builder::hasLastError() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::Reader::getLastError() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::Builder::getLastError() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::Builder::setLastError( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::Builder::initLastError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::Builder::adoptLastError(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::Builder::disownLastError() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::Reader::hasCurrentBackup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::Builder::hasCurrentBackup() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::BackupManagerSP::BackupInfo::Reader BackupManagerSP::Reader::getCurrentBackup() const {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::BackupInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::BackupManagerSP::BackupInfo::Builder BackupManagerSP::Builder::getCurrentBackup() {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::BackupInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::BackupManagerSP::BackupInfo::Pipeline BackupManagerSP::Pipeline::getCurrentBackup() {
  return  ::cereal::BackupManagerSP::BackupInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void BackupManagerSP::Builder::setCurrentBackup( ::cereal::BackupManagerSP::BackupInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::BackupInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::BackupManagerSP::BackupInfo::Builder BackupManagerSP::Builder::initCurrentBackup() {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::BackupInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::Builder::adoptCurrentBackup(
    ::capnp::Orphan< ::cereal::BackupManagerSP::BackupInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::BackupInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::BackupManagerSP::BackupInfo> BackupManagerSP::Builder::disownCurrentBackup() {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::BackupInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::Reader::hasBackupHistory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::Builder::hasBackupHistory() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Reader BackupManagerSP::Reader::getBackupHistory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Builder BackupManagerSP::Builder::getBackupHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::Builder::setBackupHistory( ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>::Builder BackupManagerSP::Builder::initBackupHistory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::Builder::adoptBackupHistory(
    ::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>> BackupManagerSP::Builder::disownBackupHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::BackupInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint16_t BackupManagerSP::Version::Reader::getMajor() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t BackupManagerSP::Version::Builder::getMajor() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Version::Builder::setMajor( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t BackupManagerSP::Version::Reader::getMinor() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t BackupManagerSP::Version::Builder::getMinor() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Version::Builder::setMinor( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t BackupManagerSP::Version::Reader::getPatch() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t BackupManagerSP::Version::Builder::getPatch() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Version::Builder::setPatch( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t BackupManagerSP::Version::Reader::getBuild() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t BackupManagerSP::Version::Builder::getBuild() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::Version::Builder::setBuild( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool BackupManagerSP::Version::Reader::hasBranch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::Version::Builder::hasBranch() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::Version::Reader::getBranch() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::Version::Builder::getBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::Version::Builder::setBranch( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::Version::Builder::initBranch(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::Version::Builder::adoptBranch(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::Version::Builder::disownBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::MetadataEntry::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::MetadataEntry::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::MetadataEntry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::MetadataEntry::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::MetadataEntry::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::MetadataEntry::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::MetadataEntry::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::MetadataEntry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::MetadataEntry::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::MetadataEntry::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::MetadataEntry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::MetadataEntry::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::MetadataEntry::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::MetadataEntry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::MetadataEntry::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::MetadataEntry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::MetadataEntry::Reader::hasTags() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::MetadataEntry::Builder::hasTags() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader BackupManagerSP::MetadataEntry::Reader::getTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder BackupManagerSP::MetadataEntry::Builder::getTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::MetadataEntry::Builder::setTags( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void BackupManagerSP::MetadataEntry::Builder::setTags(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder BackupManagerSP::MetadataEntry::Builder::initTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::MetadataEntry::Builder::adoptTags(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> BackupManagerSP::MetadataEntry::Builder::disownTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::BackupInfo::Reader::hasDeviceId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::BackupInfo::Builder::hasDeviceId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::BackupInfo::Reader::getDeviceId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::getDeviceId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::BackupInfo::Builder::setDeviceId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::initDeviceId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::BackupInfo::Builder::adoptDeviceId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::BackupInfo::Builder::disownDeviceId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t BackupManagerSP::BackupInfo::Reader::getVersion() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t BackupManagerSP::BackupInfo::Builder::getVersion() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::BackupInfo::Builder::setVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BackupManagerSP::BackupInfo::Reader::hasConfig() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::BackupInfo::Builder::hasConfig() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::BackupInfo::Reader::getConfig() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::getConfig() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::BackupInfo::Builder::setConfig( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::initConfig(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::BackupInfo::Builder::adoptConfig(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::BackupInfo::Builder::disownConfig() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::BackupInfo::Reader::getIsEncrypted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool BackupManagerSP::BackupInfo::Builder::getIsEncrypted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void BackupManagerSP::BackupInfo::Builder::setIsEncrypted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool BackupManagerSP::BackupInfo::Reader::hasCreatedAt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::BackupInfo::Builder::hasCreatedAt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::BackupInfo::Reader::getCreatedAt() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::getCreatedAt() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::BackupInfo::Builder::setCreatedAt( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::initCreatedAt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::BackupInfo::Builder::adoptCreatedAt(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::BackupInfo::Builder::disownCreatedAt() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::BackupInfo::Reader::hasUpdatedAt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::BackupInfo::Builder::hasUpdatedAt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupManagerSP::BackupInfo::Reader::getUpdatedAt() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::getUpdatedAt() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::BackupInfo::Builder::setUpdatedAt( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupManagerSP::BackupInfo::Builder::initUpdatedAt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::BackupInfo::Builder::adoptUpdatedAt(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupManagerSP::BackupInfo::Builder::disownUpdatedAt() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::BackupInfo::Reader::hasSunnypilotVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::BackupInfo::Builder::hasSunnypilotVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::BackupManagerSP::Version::Reader BackupManagerSP::BackupInfo::Reader::getSunnypilotVersion() const {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::Version>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::BackupManagerSP::Version::Builder BackupManagerSP::BackupInfo::Builder::getSunnypilotVersion() {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::Version>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::BackupManagerSP::Version::Pipeline BackupManagerSP::BackupInfo::Pipeline::getSunnypilotVersion() {
  return  ::cereal::BackupManagerSP::Version::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void BackupManagerSP::BackupInfo::Builder::setSunnypilotVersion( ::cereal::BackupManagerSP::Version::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::Version>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::BackupManagerSP::Version::Builder BackupManagerSP::BackupInfo::Builder::initSunnypilotVersion() {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::Version>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::BackupInfo::Builder::adoptSunnypilotVersion(
    ::capnp::Orphan< ::cereal::BackupManagerSP::Version>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::Version>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::BackupManagerSP::Version> BackupManagerSP::BackupInfo::Builder::disownSunnypilotVersion() {
  return ::capnp::_::PointerHelpers< ::cereal::BackupManagerSP::Version>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool BackupManagerSP::BackupInfo::Reader::hasBackupMetadata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool BackupManagerSP::BackupInfo::Builder::hasBackupMetadata() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Reader BackupManagerSP::BackupInfo::Reader::getBackupMetadata() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Builder BackupManagerSP::BackupInfo::Builder::getBackupMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void BackupManagerSP::BackupInfo::Builder::setBackupMetadata( ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>::Builder BackupManagerSP::BackupInfo::Builder::initBackupMetadata(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void BackupManagerSP::BackupInfo::Builder::adoptBackupMetadata(
    ::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>> BackupManagerSP::BackupInfo::Builder::disownBackupMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::BackupManagerSP::MetadataEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LiveMapDataSP::Reader::getSpeedLimitValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataSP::Builder::getSpeedLimitValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataSP::Reader::getSpeedLimitAheadValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataSP::Builder::getSpeedLimitAheadValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitAheadValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getSpeedLimitAhead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getSpeedLimitAhead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitAhead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getSpeedLimitAheadDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getSpeedLimitAheadDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitAheadDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataSP::Reader::hasRoadName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataSP::Builder::hasRoadName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveMapDataSP::Reader::getRoadName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveMapDataSP::Builder::getRoadName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveMapDataSP::Builder::setRoadName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveMapDataSP::Builder::initRoadName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataSP::Builder::adoptRoadName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveMapDataSP::Builder::disownRoadName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

